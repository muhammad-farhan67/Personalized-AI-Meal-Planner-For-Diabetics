import streamlit as st
import anthropic
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet
import io
import base64

 api_key = st.secrets["ANTHROPIC_API_KEY"]

def generate_meal_plan(fasting_sugar, pre_meal_sugar, post_meal_sugar, dietary_preferences):
    client = anthropic.Anthropic(api_key=api_key)
    
    prompt = f"""
    Generate a personalized meal plan for a diabetic patient with the following details:
    - Fasting Sugar Level: {fasting_sugar} mg/dL
    - Pre-meal Sugar Level: {pre_meal_sugar} mg/dL
    - Post-meal Sugar Level: {post_meal_sugar} mg/dL
    - Dietary Preferences: {', '.join(dietary_preferences)}

    Provide a detailed meal plan for one day, including breakfast, lunch, dinner, and two snacks. 
    For each meal, include specific food items, portion sizes, and approximate calorie counts. 
    Also, provide brief explanations on how each meal helps manage blood sugar levels.
    """

    message = client.messages.create(
        model="claude-3-5-sonnet-20240620",
        max_tokens=1000,
        temperature=0.7,
        system="You are a professional nutritionist specializing in meal plans for diabetic patients. Provide detailed and personalized meal plans based on the given information.",
        messages=[
            {
                "role": "user",
                "content": [
                    {
                        "type": "text",
                        "text": prompt
                    }
                ]
            }
        ]
    )
    
    raw_context = message.content
    itinerary = raw_context[0].text
    return itinerary

def create_pdf(meal_plan):
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter)
    styles = getSampleStyleSheet()
    story = []

    story.append(Paragraph("Personalized Meal Plan for Diabetics", styles['Title']))
    story.append(Spacer(1, 12))
    story.append(Paragraph(meal_plan, styles['BodyText']))
    story.append(Spacer(1, 12))
    disclaimer = "DISCLAIMER: This meal plan is generated by an AI for informational purposes only. Please consult with a healthcare professional or registered dietitian for personalized medical advice and dietary recommendations."
    story.append(Paragraph(disclaimer, styles['Italic']))

    doc.build(story)
    buffer.seek(0)
    return buffer

def get_pdf_download_link(pdf_buffer, filename):
    b64 = base64.b64encode(pdf_buffer.getvalue()).decode()
    return f'<a href="data:application/octet-stream;base64,{b64}" download="{filename}">Download Meal Plan as PDF</a>'

def main():
    st.set_page_config(page_title="Personalized AI Meal Planner for Diabetics")

    st.title("Personalized AI Meal Planner for Diabetics")

    # Sidebar inputs
    st.sidebar.header("Patient Information")
    
    fasting_sugar = st.sidebar.number_input("Fasting Sugar Levels (mg/dL)", min_value=0, max_value=500, step=1)
    pre_meal_sugar = st.sidebar.number_input("Pre-meal Sugar Levels (mg/dL)", min_value=0, max_value=500, step=1)
    post_meal_sugar = st.sidebar.number_input("Post-meal Sugar Levels (mg/dL)", min_value=0, max_value=500, step=1)
    
    dietary_preferences = st.sidebar.multiselect(
        "Dietary Preferences",
        options=["Vegetarian", "Vegan", "Gluten-free", "Low-carb", "Mediterranean", "Keto", "No restrictions"]
    )

    # Main content
    st.header("Your Personalized Meal Plan")
    
    if st.button("Generate Meal Plan"):
        if not dietary_preferences:
            st.warning("Please select at least one dietary preference.")
        else:
            with st.spinner("Generating your personalized meal plan..."):
                meal_plan = generate_meal_plan(fasting_sugar, pre_meal_sugar, post_meal_sugar, dietary_preferences)
            
            st.subheader("Your Personalized Meal Plan:")
            st.markdown(meal_plan)

            st.markdown("---")
            st.markdown("**DISCLAIMER:** This meal plan is generated by an AI for informational purposes only. Please consult with a healthcare professional or registered dietitian for personalized medical advice and dietary recommendations.")

            pdf_buffer = create_pdf(meal_plan)
            st.markdown(get_pdf_download_link(pdf_buffer, "personalized_meal_plan.pdf"), unsafe_allow_html=True)

if __name__ == "__main__":
    main()
